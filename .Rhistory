ga.webProfile
View(ga.webProfile)
ga <- RGoogleAnalytics()
query$Init(start.date = "2013-12-08",
end.date = "2014-02-15",
dimensions = "ga:date, ga:region",
metrics = "ga:visits, ga:avgTimeOnSite, ga:transactions",
sort = "ga:date, -ga:visits",
max.results = 10000,
table.id = paste("ga:",ga.webProfile$id[7],sep="",collapse=","),
access_token=access_token)
ga.data <- ga$GetReportData(query)
View(ga.data)
ga.clean <- ga.data[!ga.data$region == "(not set)", ]
sum <- ddply(ga.clean,.(region),summarize,sum=sum(visits))
top5 <- sum[order(sum$sum,decreasing=TRUE),][1:5,]
top5
View(top5)
d <- ga.clean[ga.clean$region %in%
c("North Rhine-Westphalia", "Bavaria", "Baden-Wurttemberg", "Lower Saxony", "Hesse"),]
View(d)
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
rect_campaign <- data.frame (
xmin=strptime('2014-01-25',"%Y-%m-%d"),
xmax=strptime('2014-01-30', "%Y-%m-%d"),
ymin=-Inf, ymax=Inf)
rect_xmas <- data.frame (
xmin=strptime('2013-12-25',"%Y-%m-%d"),
xmax=strptime('2013-12-26', "%Y-%m-%d"),
ymin=-Inf, ymax=Inf)
fill_cols <- c("Christmas"="red",
"Campaign"="gray20")
line_cols <- c("avgTimeOnSite" = "#781002",
"visits" = "#023378",
"transactions" = "#02780A")
get_legend <- function(data) {
d_m <- melt(data,id=c("region", "date_f"))
p <- ggplot() +
geom_smooth(data = d_m, aes(x=date_f, y=value,group=variable,color=variable),se=F) +
geom_rect(data = rect_campaign,
aes(xmin=xmin,
xmax=xmax,
ymin=ymin,
ymax=ymax,
fill="Campaign"), alpha=0.5) +
geom_rect(data = rect_xmas,
aes(xmin=xmin,
xmax=xmax,
ymin=ymin,
ymax=ymax,
fill="Christmas"), alpha=0.5) +
theme_bw() +
theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.key = element_blank(),
legend.key.height = unit(1, "lines"),
legend.key.width = unit(2, "lines"),
panel.margin = unit(0.5, "lines")) +
scale_fill_manual(name = "", values=fill_cols)  +
scale_color_manual(name = "",
values=line_cols,
labels=c("Number of visits", "Average time on site","Transactions"))
legend <- g_legend(p)
return(legend)
}
years <- substr(d$date, 1, 4)
months <- substr(d$date, 5, 6)
days <- substr(d$date, 7, 8)
d$date_f <- strptime(paste(years, months, days, sep="-"), "%Y-%m-%d")
d$date <- NULL
d$X <- NULL
l <- get_legend(d)
p1 <- ggplot(d, aes(x=date_f, y=visits,)) +
geom_line(colour="#023378") +
ggtitle("Number of visits") +
geom_rect(data = rect_campaign,
aes(xmin=xmin,
xmax=xmax,
ymin=ymin,
ymax=ymax),
fill="grey20",
alpha=0.5,
inherit.aes = FALSE) +
geom_rect(data = rect_xmas,
aes(xmin=xmin,
xmax=xmax,
ymin=ymin,
ymax=ymax),
fill="red",
alpha=0.5,
inherit.aes = FALSE) +
facet_grid (region ~ .) +
theme_bw() +
theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
panel.margin = unit(0.5, "lines"))
p2 <- ggplot(d, aes(x=date_f, y=avgTimeOnSite,)) +
geom_line(colour="#781002") +
geom_rect(data = rect_campaign,
aes(xmin=xmin,
xmax=xmax,
ymin=ymin,
ymax=ymax),
fill="grey20",
alpha=0.5,
inherit.aes = FALSE) +
geom_rect(data = rect_xmas,
aes(xmin=xmin,
xmax=xmax,
ymin=ymin,
ymax=ymax),
fill="red",
alpha=0.5,
inherit.aes = FALSE) +
facet_grid (region ~ .) +
ggtitle("Average time on site") +
coord_cartesian(ylim = c(0, 250)) +
theme_bw() +
theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
panel.margin = unit(0.5, "lines"))
p3 <- ggplot(d, aes(x=date_f, y=transactions,)) +
geom_line(colour="#02780A") +
facet_grid (region ~ .) +
geom_rect(data = rect_campaign,
aes(xmin=xmin,
xmax=xmax,
ymin=ymin,
ymax=ymax),
fill="grey20",
alpha=0.5,
inherit.aes = FALSE) +
geom_rect(data = rect_xmas,
aes(xmin=xmin,
xmax=xmax,
ymin=ymin,
ymax=ymax),
fill="red",
alpha=0.5,
inherit.aes = FALSE) +
ggtitle("Number of transactions") +
theme_bw() +
theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
panel.margin = unit(0.5, "lines"))
grid.arrange(arrangeGrob(p1,p2,p3,ncol=3, main=textGrob("US States: Website Interaction & Commerce", vjust=1.5)),l,
ncol=2,
widths=c(9, 2))
install.packages(c("RCurl", "rjson", "ggplot2", "plyr", "gridExtra", "reshape"))
require("RCurl")
require("rjson")
require("ggplot2")
require("plyr")
require("gridExtra")
require("reshape")
require("RGoogleAnalytics")
query <- QueryBuilder()
conf <- Configuration()
ga.account <- conf$GetAccounts()
ga.account
ga.webProperty <- conf$GetWebProperty(ga.account$id[9])
ga.webProperty
ga.webProfile <- conf$GetWebProfile(ga.account$id[9],ga.webProperty$id[593096])
ga.webProfile
ga <- RGoogleAnalytics()
profile <- ga.webProfile$id[7]
startdate <- "2013-12-08"
enddate <- "2014-02-15"
dimension <- "ga:date,ga:region"
metric <- "ga:visits, ga:avgTimeOnSite, ga:transactions"
filter <- "ga:country==United States"
sort <- "ga:date"
maxresults <- 10000
query$Init(start.date = "2013-12-08",
end.date = "2014-02-15",
dimensions = "ga:date, ga:region",
metrics = "ga:visits, ga:avgTimeOnSite, ga:transactions",
sort = "ga:date, -ga:visits",
max.results = 10000,
table.id = paste("ga:",ga.webProfile$id[7],sep="",collapse=","),
access_token=access_token)
ga.data <- ga$GetReportData(query)
access_token <- query$authorize()
query$Init(start.date = "2013-12-08",
end.date = "2014-02-15",
dimensions = "ga:date, ga:region",
metrics = "ga:visits, ga:avgTimeOnSite, ga:transactions",
sort = "ga:date, -ga:visits",
max.results = 10000,
table.id = paste("ga:",ga.webProfile$id[7],sep="",collapse=","),
access_token=access_token)
ga.data <- ga$GetReportData(query)
head(ga.data)
View(ga.data)
sum <- ddply(ga.clean,.(region),summarize,sum=sum(visits))
top5 <- sum[order(sum$sum,decreasing=TRUE),][1:5,]
top5
d <- ga.clean[ga.clean$region %in%
c("North Rhine-Westphalia", "Bavaria", "Baden-Wurttemberg", "Lower Saxony", "Hesse"),]
help.start()
x <- rnorm(50)
y <- rnorm(x)
plot(x, y)
ls()
rm(x,y)
x = 1:20
w = 1+sqrt(x)/2
dummy <- data.frame(x=x, y= x + rnorm(x)*w)
dummy
fm <- lm(y ~ x, data=dummy)
summary(fm)
arry = 1:3
arry[2]
arry[4]=0
arry
arry[8]=1
arry
help.start()
x <- rnorm(50)
y <- rnorm(x)
plot(x, y)
install.packages("ggplot2")
ls()
arry[2]
typeof(1:4)
1:4
typeof(c(1,2,3))
class(c(1,2,3))
class(1:4)
save.image("~/.RData")
library(swirl)
swirl()
TRUE == TRUE
FALSE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,TRUE,TRUE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints<-sample(10)
ints
ints>5
which(ints>5)
which(ints>7)
any(ints<0)
all(ints>0)
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
iris
iris[,iris$Species="virginica"]
iris[,iris$Species=="virginica"]
iris[iris$Species=="virginica",]
mean(iris[iris$Species=="virginica",]$Sepal.Length)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
?apply
data(mtcars)
mtcars
View(mtcars)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
mean(mtcars[mtcars$cyl==4,]$hp)
mean(mtcars[mtcars$cyl==8,]$hp)-mean(mtcars[mtcars$cyl==4,]$hp)
debug(ls)
ls
ls()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){first(x)}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Toooobi")
submit()
mad_libs(place="aaaa",adjective="bbbbb",noun="cccc")
submit()
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lappy(flags,unique)
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
?<<-
help(<<-)
?"<<-"
?solve
?make
make
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=T)
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips<-sample(c(0,1),100,replace=TRUE,c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
flips<-rbinom(n=100, size = 1, prob = 0.7)
flips2<-rbinom(n=100, size = 1, prob = 0.7)
flips
flips2
sum(flips)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
rpois(5,mean=10)
?rpois
rpois(5,lambda=10)
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?set.seed
?rpois
?ppois
?qpois
?rep
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
?rnorm
?rprof
library(datasets)
?rprof
?Rprof
system.time()
library(swirl)
swirl()
d1<-sys.date()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quaters(t2)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,"%B %d,%Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
zz<-difftime(Sys.time(), t1, units = 'days')
zz
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
?plot
plot(y = cars$speed, x = cars$dist,xlab="Speed")
plot(x = cars$speed, y = cars$dist,xlab="Speed")
plot(x = cars$speed, y = cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist,ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
?par
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
data(mtcars)
?boxplot
boxplot(formula = mpg~cyl,data=mtcars)
hist(mtcars$mpg)
0
install.packages("DBI")
getwd()
setwd("C:/Users/Tobi/Documents/GitHub/explo1/ExData_Plotting1")
dir()
data<-read.csv2("household_power_consumption.txt",stringsAsFactors=FALSE)
auswahl<-(data$Date == "1/2/2007" | data$Date == "2/2/2007")
data2<-data[auswahl,]
data2$Date<-strptime(data2$Date, "%d/%m/%Y")
data2$DateTime <- strptime(paste(data2$Date, data2$Time), "%Y-%m-%d %H:%M:%S")
data2$Global_active_power<-as.double(data2$Global_active_power)
data2$Sub_metering_1<-as.double(data2$Sub_metering_1)
data2$Sub_metering_2<-as.double(data2$Sub_metering_2)
data2$Sub_metering_3<-as.double(data2$Sub_metering_3)
## Create 1. Plot
png('plot1.png',width = 480, height = 480)
hist(data2$Global_active_power,xlab="Global Active Power (kilowatts)",main="Global Active Power",col="red")
dev.off()
## Create 2. Plot
png('plot2.png',width = 480, height = 480)
plot(x=data2$DateTime,y=data2$Global_active_power,type="l",ylab="Global Active Power (kilowatts)",xlab = "")
dev.off()
## Create 3. Plot
png('plot3.png',width = 480, height = 480)
plot(x=data2$DateTime,y=data2$Sub_metering_1,type="l",ylab="Energy sub metering",xlab = "",col="black")
points(x=data2$DateTime,y=data2$Sub_metering_2,type="l",col="red")
points(x=data2$DateTime,y=data2$Sub_metering_3,type="l",col="blue")
legend("topright", col = c("black","red","blue"), pch="-",legend = c("Sub_metering_1", "Sub_metering_2","Sub_metering_3"))
dev.off()
